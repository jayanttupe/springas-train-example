<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/halo"
		  paddingTop="15" paddingRight="15" paddingBottom="15" paddingLeft="15"
		  width="800" height="200">
	
	<fx:Script>
		<![CDATA[
			import controllers.Controller;
			import mx.collections.ArrayCollection;
			import models.Model;
			
			/**
			 * Autowired by name for demo purposes.
			 * Note the lack of an attribute name as tags now have default attributes.
			 * Default attribute for Autowire is source, for Mediate it's event.
			 */
			[Inject( "appModel" )]
			[Bindable]
			public var model:Model;
			
			/**
			 * Autowired by type since there is exactly one Controller in the app.
			 */
			[Inject]
			public var controller:Controller;
			
			/**
			 * Custom metadata processor!
			 * Will assign a random number to the property it decorates.
			 * See processors.RandomProcessor
			 */
			[Random]
			[Bindable]
			public var someRandomNumber:Number;
			
			/**
			 * Custom metadata processor!
			 * Will create a timer and update the property it decorates every second.
			 * See processors.ClockProcessor
			 */
			[Clock]
			[Bindable]
			public var clockTime:String = "";
			
			/**
			 * Remember personList actually maps to a property on Model that was decorated with [VirtualBean( name="personList" )].
			 * Populates mx:List below via regular binding.
			 */
			[Inject( "personList" )]
			[Bindable]
			public var myList:ArrayCollection;
			
		]]>
	</fx:Script>
	
	<fx:Metadata>
		
		/**
		* These are class-level metadata tags and work a lot like mx:Binding tags.
		* Keeps you from having to create a bindable public var just to bind a child to it.
		* Dot notation in source shows accessing a deeply nested property.
		*/
		[Inject( source="appModel.subModel.subModelString", destination="subModelLabel.text" )]
		
		/**
		* Source and destination with dot notation.
		* twoWay="true" sets up two way binding so changing the destination property will update the source.
		*/
		[Inject( source="appModel.inputString", destination="ti.text", twoWay="true" )]
		
	</fx:Metadata>
	
	<s:VGroup width="375">
		<s:Label text="{ model.modelString }" />
		<s:Button label="Change Label Above" click="dispatchEvent( new Event( 'testEvent', true, true ) )" />
		
		<s:Label id="subModelLabel" />
		
		<s:Label text="Current time is { clockTime }" />
		
		<s:RichText text="{ someRandomNumber }" />
		
	</s:VGroup>
	
	<s:VGroup width="300">
		<s:Label text="{ model.inputString }" />
		<s:TextInput id="ti" width="300" />
	</s:VGroup>
	
	<s:List dataProvider="{ myList }" width="50" height="70" />
	
</s:HGroup>
